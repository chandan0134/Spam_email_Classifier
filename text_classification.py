# -*- coding: utf-8 -*-
"""Text_Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pZ1uVS8RROX4x_0F62Eb6nStJObkCfMM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import re

import nltk
nltk.download('stopwords')
nltk.download('punkt')
nltk.download('wordnet')
nltk.download('omw-1.4')

from nltk import word_tokenize
from nltk.stem import WordNetLemmatizer
from nltk.corpus import stopwords

lm=WordNetLemmatizer()
sw=stopwords.words('english')
print(sw)

from google.colab import drive
drive.mount('/content/drive')

df=pd.read_csv('/content/drive/MyDrive/NLP/spam.csv', encoding="ISO-8859-1")
df.head()

df.rename(columns = {'v1':'category'}, inplace = True)

df.rename(columns = {'v2':'Message'}, inplace = True)
df.head()

df.duplicated().sum()

df.drop_duplicates()
df.head()

df1=df.drop(['Unnamed: 2','Unnamed: 3','Unnamed: 4'], axis=1)
df1.head()

df1['categoty'].value_counts()

#preprocessing steps
#1)conversio to lower case
#2)removal of punctuation
#3)word tokenization
#4)steop word removal
#5)stemming or lemmatization

df['Message'].head()

corpus=[]
for i in df['Message']:
  t=i.lower()                           #converting to lowercase
  t=re.sub('[^A-Za-z0-9]',' ',t)        #removing punctuations
  t=word_tokenize(t)                    #word tokenize
  t=[x for x in t if x not in sw]       #removing stopwords
  t=[lm.lemmatize(x) for x in t]        #lemmatizing
  t=" ".join(t)                         #binding words into sentences
  corpus.append(t)

print(corpus)

from sklearn.feature_extraction.text import CountVectorizer

cv=CountVectorizer()
sm=cv.fit_transform(corpus).toarray()
print(sm.shape)

print(cv.get_feature_names())

x=sm
y=df['categoty']
print(type(x))
print(type(y))

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.33, random_state=42)

df.shape

from sklearn.naive_bayes import MultinomialNB

m1=MultinomialNB()
m1.fit(x_train,y_train)

ypred_m1=m1.predict(x_test)
print(ypred_m1)

print('training_score',m1.score(x_train,y_train))
print('testing score',m1.score(x_test,y_test))

from sklearn.metrics import confusion_matrix,classification_report
cm_m1=confusion_matrix(y_test,ypred_m1)
print(cm_m1)
print(classification_report(y_test,ypred_m1))

